import 'dotenv/config'
import * as http from 'http'
const host = process.env.HOST
const port = process.env.PORT
const URL = process.env.URL
const apiKey = process.env.API_KEY

// create HTTP server
const requestListener = function (req, res) {
  res.writeHead(200);
  res.end("Sortify");
}
const server = http.createServer(requestListener);

server.listen(port, host, () => {
  console.log(`Server is running on http://${host}:${port}`);
})

/* TODO: redirect user to Spotify authn and store tokens */

// MAIN
let currentOffset = 0; /*test*///=0
let songUris = [];
const [userId, songUrisByTime] = await Promise.all([globalUpdateUserId(), globalUpdateSongUrisByTime()]);
//const totalSongs = songUrisByTime["total"]; //optional cache
const playlistId = await globalUpdatePlaylistId() /* REFACTOR? await setter instead of updater */

/*uncomment
//add ALL Liked Songs
for(let key in songUrisByTime) { // REFACTOR? songUris = Object.keys(songUrisByTime)
  songUris.push(songUrisByTime[key]); //prepare addSongsToPlaylist() POST body
}
//addSongsToPlaylist();*/

/* REFACTOR? take user input */
/* TEST: add 2013 Winter Liked Songs */
for (let time in songUrisByTime) {  
  if (time.slice(0,4) == "2013" && ( //parse YYYY-MM-DDTHH:MM:SSZ
    time.slice(5,7) == "10" || time.slice(5,7) == "11" || time.slice(5,7) == "12")) {
    songUris.push(songUrisByTime[time]);
  }
}
addSongsToPlaylist();
updatePlaylistName();

// GETTERS
async function getUserProfile() {
  const url = `${URL}/me`;
  const response = await fetch(url , {
    headers: {"Authorization": `Bearer ${apiKey}`},
    method: "GET"
  })

  const json = await response.json();
  return json.id;
}

async function getLikedSongs() {
  let songs = {};
  let json = await getData();
  //songs["total"] = json.total; //optional cache

  /* REFACTOR? if !null, url = json.next */
  while (currentOffset < json.total) {
    for (let i = 0, song; i < json.items.length; i++) {
      song = json.items[i].track.uri;
      songs[json.items[i].added_at] = song;
    }

    currentOffset+=json.items.length;
    json = await getData();
  }

  return songs;
}

async function getData() {
  const url = `${URL}/me/tracks?limit=50&offset=${currentOffset}`;
  try {
    const response = await fetch(url, {
      headers: {
        "Authorization": `Bearer ${apiKey}`
      },
      method: "GET"
    })

    if (!response.ok) {
      throw new Error(`Response status: ${response.status}`);
    }

    return await response.json();
  }
  catch (error) {
    console.error(error);
  }
}

// UPDATERS
async function globalUpdateUserId() {
  return await getUserProfile();
}
async function globalUpdatePlaylistId() {
  return await createPlaylist();
}
async function globalUpdateSongUrisByTime() {
  return await getLikedSongs();
}
async function updatePlaylistName(){
  try {
    const url = `${URL}/playlists/${playlistId}`;
    const response = await fetch(url, {
      headers: {
        "Authorization": `Bearer ${apiKey}`
      },
      method: "PUT",
      body: JSON.stringify({"name": "Winter 2013", "public": false, "description": "Saved tracks from October - December 2013"})
    })

    if (!response.ok) {
      throw new Error(`Response status: ${response.status}`);
    }
  }
  catch(error){
    console.error(error);
  }
}

// SETTERS
async function createPlaylist() {
  const url = `${URL}/users/${userId}/playlists`;
  try {
    const response = await fetch(url, {
      headers: {
        "Authorization": `Bearer ${apiKey}`
      },
      method: "POST",
      body: JSON.stringify({ "name": `Placeholder`, "description": "Generated by Sortify", "public": false})
    })

    if (!response.ok) {
      throw new Error(`Response status: ${response.status}`);
    }

    const json = await response.json();
    return json.id;
  }
  catch (error) {
    console.error(error);
  }
}

async function addSongsToPlaylist() {
  await getLikedSongs();
  const url = `${URL}/playlists/${playlistId}/tracks`;

  for (let i = 0; i < songUris.length; i+=100){
    try {
      const response = await fetch(url, {
        headers: {
          "Authorization": `Bearer ${apiKey}`
        },
        method: "POST",
        body: JSON.stringify({ "uris": songUris.slice(i,i+100), "position": i})
      })

      if (!response.ok) {
        throw new Error(`Response status: ${response.status}`);
      }
    }
    catch (error) {
      console.error(error);
    }
  }
}

/* Instructions
  1. npm start
  2. update API_TOKEN variable in .env

  Next Steps
  1. Parse [added_at] keys in songUrisByTime
    a. filter songs based on [added_at] year 
    b. add filtered songs to playlist
    c. update playlist name (PUT /playlists/{playlist_id})

  Roadmap
  1. Add login UI, auto refresh access token
  2. Fix await hell
  3. Add more filter options*/